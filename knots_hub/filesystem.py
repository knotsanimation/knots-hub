"""
manipulate the filesystem
"""

import logging
import os
import shutil
from pathlib import Path
from typing import Optional

from knots_hub import OS
from knots_hub.constants import EXECUTABLE_NAME
from knots_hub.constants import EXECUTABLE_NAME_REGEX
from knots_hub.constants import INTERPRETER_PATH

LOGGER = logging.getLogger(__name__)


def rmtree(path: Path, ignore_errors=False):
    """
    Remove the directory and its content while handling any potential PermissionError.

    This function is copied from ``tempfile.TemporaryDirectory._rmtree``

    Args:
        path: filesystem path to an existing directory
        ignore_errors: do not raise if there is error during cleanup
    """

    def resetperms(path_):
        try:
            os.chflags(path_, 0)
        except AttributeError:
            pass
        os.chmod(path_, 0o700)

    def onerror(func, path_, exc_info):
        if issubclass(exc_info[0], PermissionError):
            try:
                if path_ != path_:
                    resetperms(os.path.dirname(path_))
                resetperms(path_)

                try:
                    os.unlink(path_)
                # PermissionError is raised on FreeBSD for directories
                except (IsADirectoryError, PermissionError):
                    rmtree(path_, ignore_errors=ignore_errors)
            except FileNotFoundError:
                pass
        elif issubclass(exc_info[0], FileNotFoundError):
            pass
        else:
            if not ignore_errors:
                raise

    shutil.rmtree(path, onerror=onerror)


def is_runtime_from_local_install(local_install_path) -> bool:
    """
    Find if the current runtime code is executed from a local hub installation.

    Args:
        local_install_path: path of the theoric local hub installation
    """
    try:
        Path(INTERPRETER_PATH).relative_to(local_install_path)
    except ValueError:
        return False
    return True


def find_hub_executable(directory: Path) -> Optional[Path]:
    """
    Get the path of the hub executable stored in the given directory.

    Args:
        directory: filesystem path to an existing directory

    Returns:
        filesystem path to an existing file or None if not found
    """
    for filepath in directory.glob("*"):
        if filepath.is_dir():
            continue
        if EXECUTABLE_NAME_REGEX.search(filepath.name):
            return filepath
    return None


def get_expected_hub_executable(directory: Path) -> Path:
    """
    Get the path of the expected hub executable for this library version.

    Note a previous version might be installed locally so this is why this path might
    exist or not.

    Args:
        directory: filesystem path to a directory that may exist

    Returns:
        filesystem path to a file that might exist or not.
    """
    if OS.is_windows():
        return directory / f"{EXECUTABLE_NAME}.exe"
    return directory / EXECUTABLE_NAME


def _default_root_dir():
    if OS.is_windows():
        root = Path(os.environ["LOCALAPPDATA"])
        return root / "knots-hub.data"
    else:
        return Path("~/.knots-hub.data").expanduser()


# XXX do NOT ever change this directory default values between hub versions as that would
#   create issue to uninstall/install it locally.
_DEFAULT_ROOT_DIR = _default_root_dir()


class HubLocalFilesystem:
    """
    Collection of paths for storing runtime data
    """

    def __init__(self, root_dir: Optional[Path] = None):
        self._root_dir: Path = root_dir or _DEFAULT_ROOT_DIR
        self._hubrecord_path: Path = self._root_dir / ".hubinstall"
        self._log_path: Path = self._root_dir / "hub.log"

    def initialize(self):
        if not self._root_dir.exists():
            LOGGER.debug(f"mkdir('{self._root_dir}')")
            self._root_dir.mkdir()

    @property
    def root_dir(self) -> Path:
        """
        Fileystem path to a directory that may not exist but whose parent must exist.

        This directory is used to store runtime data generated by the hub.
        """
        return self._root_dir

    @property
    def hubinstall_record_path(self) -> Path:
        """
        Filesystem path to a file that may not exist yet. Used to store install metadata.
        """
        return self._hubrecord_path

    @property
    def log_path(self) -> Path:
        """
        Filesystem path to a file that may not exist yet. Used for storing python logs.
        """
        return self._log_path

    @property
    def is_hub_installed(self) -> bool:
        return self.hubinstall_record_path.exists()
